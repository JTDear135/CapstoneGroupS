# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-02-20T21:35:14+00:00

# Resources
# https://www.faa.gov/documentLibrary/media/Order/7930.2T_Bsc_dtd_12_14_23_FINAL.pdf
# https://www.faa.gov/air_traffic/flight_info/aeronav/notams/media/ICAO_NOTAM_Format_Example.pdf
# https://www.faa.gov/air_traffic/flight_info/aeronav/notams/media/2021-09-07_ICAO_NOTAM_101_Presentation_for_Airport_Operators.pdf

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Literal, NamedTuple, Optional, Set

from pydantic import BaseModel, field_validator


class AdditionalGeometryData(BaseModel):
    pass
    class Config:
        extra = 'forbid'


class HeightInformation(BaseModel):
    class Config:
        extra = 'forbid'

    upperLevel: int
    uomUpperLevel: str
    lowerLevel: int
    uomLowerLevel: str


class NotamEvent(BaseModel):
    class Config:
        extra = 'forbid'

    scenario: int


class Coordinate(NamedTuple):
    lat: float
    long: float


class PurpleType(Enum):
    Polygon = 'Polygon'
    Point = 'Point'



class Classification(Enum):
    FDC = 'FDC'
    INTL = 'INTL'
    DOM = 'DOM'
    LMIL = 'LMIL'
    MIL = 'MIL'



class Series(Enum):
    """
    The NOTAM series replaces the keywords previously used in the current domestic format
    
    B Aerodrome Maneuvering Areas RWY, TWY
    C Published Services COM, WX, ATC
    D Special Activity Airspace SAA
    E Airspace Events and Activities (PJE, Gliders etc.) PJE
    G Airways and Air Traffic Services Routes
    H Regulatory (TFR, Security) NOTAMs FDC, CARF
    I Apron/Ramp and Facilities APN
    J Obstructions (Crane, BLDG, Non-FCC Tower) OBST
    K FCC Obstructions (ASR assigned) OBST
    N Ground-Based Navigational Aids NAV
    R Field Condition (TALPA) NOTAM RWY
    V Published Instrument Procedures IFP
    Z Satellite Based Information GPS
    
    The FAA will utilize 13 different
    series for NOTAMs.
    The Department of Defense
    (DoD) uses F, L, M, V, W, and
    X Series for Military NOTAMs
    Source:
    https://www.faa.gov/air_traffic/flight_info/aeronav/notams/media/2021-09-07_ICAO_NOTAM_101_Presentation_for_Airport_Operators.pdf
    """
    A = 'A' # Appears but undocumented
            # Appears in https://www.faa.gov/documentLibrary/media/Order/7930.2T_Bsc_dtd_12_14_23_FINAL.pdf
    B = 'B'
    C = 'C'
    D = 'D'
    E = 'E'
    F = 'F' # Department of Defense
    G = 'G'
    H = 'H'
    I = 'I'
    J = 'J'
    K = 'K'
    L = 'L' # Department of Defense
    M = 'M' # Department of Defense
    N = 'N'
    R = 'R'
    V = 'V'
    W = 'W' # Department of Defense
    X = 'X' # Department of Defense
    Z = 'Z'


class NotamType(Enum):
    """
    The Action indicates the type of NOTAM. The example is a new NOTAM and is classified as a
    NOTAM

    Action Type of Notam
    N      Contains new information
    R      Replaces previous NOTAM
    C      Cancels previous non-auto cancel    
    """
    N = 'N'
    C = 'C'
    R = 'R'

class TrafficType(Enum):
    """
    This qualifier relates the NOTAM to a type of traffic and allows retrieval according to the user's needs.
    Depending on the NOTAM subject and content, the qualifier field TRAFFIC may contain the combined
    qualifiers. This example displays IV as the Traffic.

    Traffic Type of Traffic
    I Instrument Flight Rules (IFR)
    V Visual Flight Rules (VFR)
    K NOTAM is a Checklist
    """
    I = 'I'
    K = 'K'
    V = 'V'

class PurposeType(Enum):
    """
    Purpose
    The qualifier relates a NOTAM to certain purposes (intentions) and thus allows retrieval according to the
    user's requirements. Depending on the NOTAM subject and content, the qualifier field PURPOSE may
    contain combined qualifiers. This example displays NBO as the Purpose.
    
    Purpose Purpose description
    N       NOTAM selected for the immediate attention of aircraft operators
    B       NOTAM selected for pre-flight information briefing
    O       NOTAM concerning flight operations
    M       Miscellaneous NOTAM; not subject for briefing, but is available on request
    K       NOTAM is a Checklist
    """
    N = 'N'
    B = 'B'
    O = 'O'
    M = 'M'
    K = 'K'

class ScopeType(Enum):
    """
    The scope qualifiers are used to categorize NOTAMs. Depending on the NOTAM subject and content,
    the qualifier field SCOPE may contain combined qualifiers. This example uses A as the scope.
    Scope Scope Description
    A Aerodrome
    E Enroute
    W Navigation warning
    K Checklist
    """
    A = 'A'
    E = 'E'
    W = 'W'
    K = 'K'

class NotamTranslationType(Enum):
    LOCAL_FORMAT = 'LOCAL_FORMAT'
    ICAO = 'ICAO'


class ItemType(Enum):
    Feature = 'Feature'


class GeometryElement(BaseModel):
    class Config:
        extra = 'forbid'

    type: Literal['Polygon'] | Literal['Point']
    subType: Optional[str] = None
    heightInformation: Optional[HeightInformation] = None
    coordinates: List[List[Coordinate]] |List[Coordinate] | Coordinate
    additionalGeometryData: Optional[AdditionalGeometryData] = None



class LocalTranslation(BaseModel):
    type: Literal["LOCAL_FORMAT"]
    simpleText: str

class ICAOTranslation(BaseModel):
    type: Literal["ICAO"]
    formattedText: str



class ItemGeometry(BaseModel):
    class Config:
        extra = 'forbid'
    type: Literal["GeometryCollection"]
    geometries: Optional[List[GeometryElement]] = None


class Notam(BaseModel):
    class Config:
        extra = 'forbid'
    
    @field_validator('traffic', 'purpose', 'scope', mode='before')
    @classmethod
    def set_from_str(cls, value: Any):
        """
        Converts str to to a set of characters.

        Required because the type of traffic, purpose, and scope are sets of characters.
        Pydantic will never coerce str to Set so this function transforms the data before Pydantic validates it.
        """
        if isinstance(value, str):
            return set(value)
        return value
    
    id: str
    number: str
    type: NotamType
    issued: datetime
    affectedFIR: Optional[str] = None 
    selectionCode: Optional[str] = None
    traffic: Optional[Set[TrafficType]] = None
    purpose: Optional[Set[PurposeType]] = None
    scope: Optional[Set[ScopeType]] = None
    location: str
    effectiveStart: datetime
    effectiveEnd: datetime | Literal["PERM"]
    text: str
    classification: Classification
    accountId: str
    lastUpdated: datetime
    icaoLocation: Optional[str] = None
    series: Optional[Series] = None
    affectedFIR: Optional[str] = None
    minimumFL: Optional[str] = None
    maximumFL: Optional[str] = None
    schedule: Optional[str] = None
    coordinates: Optional[str] = None
    radius: Optional[str] = None
    lowerLimit: Optional[str] = None
    upperLimit: Optional[str] = None


class CoreNOTAMData(BaseModel):
    class Config:
        extra = 'forbid'

    notamEvent: NotamEvent
    notam: Notam
    notamTranslation: List[ICAOTranslation | LocalTranslation]


class Properties(BaseModel):
    class Config:
        extra = 'forbid'

    coreNOTAMData: CoreNOTAMData


class Item(BaseModel):
    class Config:
        extra = 'forbid'

    type: ItemType
    properties: Properties
    geometry: ItemGeometry


class APIResponseSuccess(BaseModel):
    class Config:
        extra = 'forbid'

    pageSize: int
    pageNum: int
    totalCount: int
    totalPages: int
    items: List[Item]


class APIResponseError(BaseModel):
    error: str

class APIResponseMessage(BaseModel):
    """
    API returns a message response provided invalid parameters
    """
    message: str
